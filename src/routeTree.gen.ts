/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as AuthCallbackRouteImport } from './routes/auth.callback'
import { Route as AdminUsersRouteImport } from './routes/admin/users'
import { Route as AdminSettingsRouteImport } from './routes/admin/settings'
import { Route as AdminDashboardIndexRouteImport } from './routes/admin/dashboard/index'
import { Route as AdminDashboardUsersRouteImport } from './routes/admin/dashboard/users'

const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthCallbackRoute = AuthCallbackRouteImport.update({
  id: '/auth/callback',
  path: '/auth/callback',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminUsersRoute = AdminUsersRouteImport.update({
  id: '/admin/users',
  path: '/admin/users',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminSettingsRoute = AdminSettingsRouteImport.update({
  id: '/admin/settings',
  path: '/admin/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminDashboardIndexRoute = AdminDashboardIndexRouteImport.update({
  id: '/admin/dashboard/',
  path: '/admin/dashboard/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminDashboardUsersRoute = AdminDashboardUsersRouteImport.update({
  id: '/admin/dashboard/users',
  path: '/admin/dashboard/users',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/admin/settings': typeof AdminSettingsRoute
  '/admin/users': typeof AdminUsersRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/admin': typeof AdminIndexRoute
  '/admin/dashboard/users': typeof AdminDashboardUsersRoute
  '/admin/dashboard': typeof AdminDashboardIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/admin/settings': typeof AdminSettingsRoute
  '/admin/users': typeof AdminUsersRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/admin': typeof AdminIndexRoute
  '/admin/dashboard/users': typeof AdminDashboardUsersRoute
  '/admin/dashboard': typeof AdminDashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/admin/settings': typeof AdminSettingsRoute
  '/admin/users': typeof AdminUsersRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/admin/': typeof AdminIndexRoute
  '/admin/dashboard/users': typeof AdminDashboardUsersRoute
  '/admin/dashboard/': typeof AdminDashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/admin/settings'
    | '/admin/users'
    | '/auth/callback'
    | '/admin'
    | '/admin/dashboard/users'
    | '/admin/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/admin/settings'
    | '/admin/users'
    | '/auth/callback'
    | '/admin'
    | '/admin/dashboard/users'
    | '/admin/dashboard'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/admin/settings'
    | '/admin/users'
    | '/auth/callback'
    | '/admin/'
    | '/admin/dashboard/users'
    | '/admin/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  AdminSettingsRoute: typeof AdminSettingsRoute
  AdminUsersRoute: typeof AdminUsersRoute
  AuthCallbackRoute: typeof AuthCallbackRoute
  AdminIndexRoute: typeof AdminIndexRoute
  AdminDashboardUsersRoute: typeof AdminDashboardUsersRoute
  AdminDashboardIndexRoute: typeof AdminDashboardIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/callback': {
      id: '/auth/callback'
      path: '/auth/callback'
      fullPath: '/auth/callback'
      preLoaderRoute: typeof AuthCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/admin/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/settings': {
      id: '/admin/settings'
      path: '/admin/settings'
      fullPath: '/admin/settings'
      preLoaderRoute: typeof AdminSettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/dashboard/': {
      id: '/admin/dashboard/'
      path: '/admin/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/dashboard/users': {
      id: '/admin/dashboard/users'
      path: '/admin/dashboard/users'
      fullPath: '/admin/dashboard/users'
      preLoaderRoute: typeof AdminDashboardUsersRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  AdminSettingsRoute: AdminSettingsRoute,
  AdminUsersRoute: AdminUsersRoute,
  AuthCallbackRoute: AuthCallbackRoute,
  AdminIndexRoute: AdminIndexRoute,
  AdminDashboardUsersRoute: AdminDashboardUsersRoute,
  AdminDashboardIndexRoute: AdminDashboardIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
